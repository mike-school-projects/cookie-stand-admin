import { useAuth } from "../contexts/auth";
import useResource from "@/hooks/useResource"
import LoginForm from '../components/LoginForm';
import Head from 'next/head';
import Header from '../components/Header';
import CookieStandAdmin from '../components/CookieStandAdmin';
import Footer from '../components/Footer';
import { useEffect, useState } from 'react';
import { cookies } from "next/dist/client/components/headers";

export default function Home() {
  const [cookieStands, setCookieStands] = useState([]);
  const [grandTotal, setGrandTotal] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
  const [isLoggedIn, setLogin] = useState(false);
  const [userName, setUserName] = useState("Me");

  // Creates context to make 3 items globally accessible
  // login and logout are functions in auth.js
  // user is state object in auth.js.  Initially set to null.  login function will use API to pull user properties from backend
  const { user, login, logout } = useAuth();

  const { resources, loading, fetchResource, deleteResource, createResource } = useResource();


  useEffect((event) => {
    // Calculate total of all stores
    let array = [];
    let subtotal = 0;

    for (let i = 0; i < 15; i++) {
      subtotal = 0;

      cookieStands.forEach((stand) => {
        subtotal += stand.salesArray[i]
      })

      array.push(subtotal);
    }

    // Save new store to state
    setGrandTotal(array);

  }, [cookieStands])


  useEffect(() => {
    function populateTable() {
      if (resources == null) {
        return
      }
      if (resources.length == 0) {
        return
      }

      let array = [];

      for (let i = 0; i < resources.length; i++) {
        let location = resources[i].location;
        let minCust = resources[i].minimum_customers_per_hour;
        let maxCust = resources[i].maximum_customers_per_hour;
        let avgCookies = resources[i].average_cookies_per_sale;
        let id = resources[i].id;
        console.log(resources[i])

        // Create new store
        let newStoreSalesArray = calcSales(parseFloat(minCust), parseFloat(maxCust), parseFloat(avgCookies));

        let newCookieStand = {
          location: location,
          minCust: minCust,
          maxCust: maxCust,
          avgCookies: avgCookies,
          salesArray: newStoreSalesArray,
          id: id,
        }
        array.push(newCookieStand)

      }

      setCookieStands(array)
    }

    populateTable()

  }, [resources])



  function formHandler(event) {
    event.preventDefault();


    let location = event.target.elements.location.value;
    let minCust = event.target.elements.minCust.value;
    let maxCust = event.target.elements.maxCust.value;
    let avgCookies = event.target.elements.avgCookies.value;

    // Create new store
    let newStoreSalesArray = calcSales(parseFloat(minCust), parseFloat(maxCust), parseFloat(avgCookies));

    let newCookieStand = {
      location: location,
      owner: "admin",
      minimum_customers_per_hour: minCust,
      maximum_customers_per_hour: maxCust,
      average_cookies_per_sale: avgCookies,
      hourly_sales: newStoreSalesArray,
    }

    createResource(newCookieStand)

    event.target.reset();
  }

  function loginFormHandler(event) {
    event.preventDefault();

    let userName = event.target.elements.userName.value;
    let password = event.target.elements.password.value;

    login(userName, password)

    event.target.reset();
  }

  function calcSales(minCust, maxCust, avgCookies) {
    let array = [];

    for (let i = 0; i < 14; i++) {
      array[i] = Math.round(Math.round(Math.floor(Math.random() * (maxCust - minCust + 1) + minCust)) * avgCookies)
    }

    // Calculate total
    let total = 0;

    array.forEach(item => {
      total += item;
    })

    array.push(total)

    return array
  }

  function calcStoreTotal(salesArray) {
    let total = 0;

    salesArray.forEach(item => {
      total += item;
    })

    return total
  }



  return (

    <div className="">
      <Head>
        <title>Cookie Stand Admin</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header
        userName={userName}
      />

      {user
        ? <CookieStandAdmin
          formHandler={formHandler}
          cookieStands={cookieStands}
          grandTotal={grandTotal}
          stands={resources || []}
          deleteStand={deleteResource}
        />
        : <LoginForm
          loginFormHandler={loginFormHandler}
        />

      }

      <Footer
        cookieStands={cookieStands}
        isLoggedIn={isLoggedIn}
      />

    </div>

  );
}
